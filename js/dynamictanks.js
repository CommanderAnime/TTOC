
/* Classy */
(function (t) { var o; function object(t, e) { this.__class = t; t.__init(this); if (e) copyFields(e, this) } function copyValue(t, e) { if (t === null || typeof t != "object" || t.__class || t.__metaclass || t.__immutable) return t; if (e) { var r = e.objects.indexOf(t); if (r >= 0) return e.copies[r] } var i = new t.constructor; if (e) { e.objects.push(t); e.copies.push(i) } for (var s in t) i[s] = copyValue(t[s], e); return i } function copyFields(t, e) { var r = { objects: [], copies: [] }; for (var i in t) { var s = t[i]; if (typeof s == "function") e[i] = s.apply(e); else e[i] = copyValue(s, r) } } function copyActiveField(t, e, r) { var i = Object.getOwnPropertyDescriptor(t, e); if (i.get || i.set) Object.defineProperty(r, e, i); return i.get || i.set } function copyActiveFields(t, e) { for (var r in t) copyActiveField(t, r, e) } function noSuper() { } function constructorWithSuper(i, s, n) { var a = i.__superclass; if (n.toString().search(/\W_super\W/m) < 0) return function () { n.apply(this, arguments); for (var t = 0; t < i.__mixins.length; t++)i.__mixins[t].constructor.apply(this); return this }; return function () { var t = this._super; this._super = a == Object ? noSuper : a.__constructors[s] || noSuper; try { var e = n.apply(this, arguments); for (var r = 0; r < i.__mixins.length; r++)i.__mixins[r].constructor.apply(this) } finally { if (t) this._super = t; else delete this._super } return this } } function methodWithSuper(e, r, i) { if (e.toString().search(/\W_super\W/m) < 0) return e; return function () { var t = this._super; this._super = i == Object ? noSuper : i.__methods[r] || noSuper; try { return e.apply(this, arguments) } finally { if (t) this._super = t; else delete this._super } } } function newClass(t) { if (!t) t = Object; var e, r, i; function classProto() { } if (t === Object) { classProto.prototype = o; r = {}; i = { toString: function () { return this.__class ? "instance of " + this.__class : "[unknown Classy Object]" }, className: function () { return this.__class.__name }, classs: function () { return this.__class }, set: function (t, e) { switch (arguments.length) { case 0: return this; case 1: var r = t; if (r.__class) { var i = r.__class.listFields(); for (var s = 0; s < i.length; s++) { var n = i[s]; if (this.__class.hasField(n)) this[n] = r[n] } } else { for (var n in r) if (this.__class.hasField(n)) this[n] = r[n] } return this; case 2: if (t instanceof Array && e instanceof Array) { for (var s = 0; s < t.length; s++) { var n = t[s]; if (this.__class.hasField(n)) this[n] = e[s] } return this } default: for (var s = 0; s < arguments.length; s += 2) { var n = arguments[s], e = arguments[s + 1]; if (this.__class.hasField(t)) this[n] = e } return this } }, get: function (t) { switch (arguments.length) { case 0: var e = this.__class.listFields(); var r = {}; for (var i = 0; i < e.length; i++) { var s = e[i]; r[s] = this[s] } return r; case 1: if (t instanceof Array) { var n = []; for (var i = 0; i < t.length; i++) { var s = t[i]; if (this.__class.hasField(s)) n.push(this[s]); else n.push(undefined) } return n } if (typeof t == "string" || t instanceof String) { if (this.__class.hasField(t)) return this[t]; return undefined } if (typeof t == "object") { var r = {}; if (r.__class) { var e = r.__class.listFields(); for (var i = 0; i < e.length; i++) { var s = e[i]; if (this.__class.hasField(s)) r[s] = this[s] } } else { for (s in t) if (this.__class.hasField(s)) r[s] = this[s] } return r } return null; default: var a = []; for (var i = 0; i < arguments.length; i++) { var s = arguments[i]; if (this.__class.hasField(s)) a.push(s, this[s]) } return a } }, wrapField: function (t, e, r, i) { wrapField(this, t, e, r, i || this); return this }, unwrapField: function (t, e) { unwrapField(this, t, e || this); return this }, unwrapFields: function (t) { unwrapFields(this, t || this); return this } } } else { classProto.prototype = t.__metaclass; var s = new Function; s.prototype = t.__constructors; r = new s; var n = new Function; n.prototype = t.__methods; i = new n } e = new classProto; var a = function () { this.__metaclass = e; this.__superclass = t; this.__constructors = r; this.__methods = i; this.__fields = {}; this.__activeFields = {}; this.__mixins = []; this.__wrappedFields = {} }; a.prototype = e; return new a } function wrapMixinMethod(r, i, s) { if (r.toString().search(/\W_super\W/m) < 0) if (r.toString().search(/\W_inner\W/m) < 0) return r; else return function () { var t = this._inner; this._inner = arguments.callee.__inner; try { return r.apply(this, arguments) } finally { if (t) this._inner = t; else delete this._inner } }; return function () { var t = this._super; this._super = s == Object ? noSuper : s.__methods[i] || noSuper; var e = this._inner; this._inner = arguments.callee.__inner; try { return r.apply(this, arguments) } finally { if (t) this._super = t; else delete this._super; if (e) this._inner = e; else delete this._inner } } } function defineMixinMethods(t, e) { for (var r in e.methods) if (!t.getOwnMethod(r)) { var i = e.methods[r]; t.method(r, i); var s = t.getOwnMethod(r); if (s != i) s.__owner = e } } function undefineMixinMethods(t, e) { for (var r in e.methods) { var i = e.methods[r]; var s = t.getOwnMethod(r); if (s && (s === i || s.__owner === e)) delete t.__methods[r] } } function unwrapWrappers(t, e, r) { var i = t.getOwnMethod(e); var s = []; while (i && i.__inner) { var n = t.__popWrapper(e); if (r && n === r) break; s.push(n); i = i.__inner } return s } function wrapWrappers(t, e, r) { for (var i = r.length - 1; i >= 0; i--)t.wrap(e, r[i]) } function makeGetterSetter(e, r, i, s, t) { var n = function () { return e[r] }; var a = function (t) { e[r] = t }; var o = i; if (i) { o = function () { var t = this._get; this._get = n; var e = this._set; this._set = a; try { return i.call(this) } finally { if (t) this._get = t; else delete this._get; if (e) this._set = e; else delete this._set } }; o.__orig = i; if (t) o.__owner = t } else o = function () { return e[r] }; var u = s; if (s) { u = function (t) { var e = this._get; this._get = n; var r = this._set; this._set = a; try { s.call(this, t) } finally { if (e) this._get = e; else delete this._get; if (r) this._set = r; else delete this._set } }; u.__orig = s; if (t) u.__owner = t } else u = function (t) { e[r] = t }; return { getter: o, setter: u } } function wrapField(t, e, r, i, s) { var n = "$" + e; var a = Object.getOwnPropertyDescriptor(t, e); var o = a ? a.get : undefined; var u = a ? a.set : undefined; if (t.hasOwnProperty(n)) { var h = o ? o.__orig : undefined; var _ = u ? u.__orig : undefined; var c = o ? o.__owner : u.__owner; wrapField(t, n, h, _, c) } else if (o || u) { a = { enumerable: true, configurable: true }; if (o) a.get = o; if (u) a.set = u; Object.defineProperty(t, n, a) } else { t[n] = t[e] } var f = makeGetterSetter(t, n, r, i, s); a = { enumerable: true, configurable: true }; a.get = f.getter; a.set = f.setter; if (r || i) Object.defineProperty(t, e, a) } function wrapFields(t, e, r) { var i; for (var s in t) { i = Object.getOwnPropertyDescriptor(t, s); wrapField(e, s, i.get, i.set, r) } } function unwrapField(t, e, r) { var i = "$" + e; var s = !r; var n = Object.getOwnPropertyDescriptor(t, e); var a = n ? n.get : undefined; var o = n ? n.set : undefined; while (t.hasOwnProperty(i)) { if (!s) { if (a && a.__owner === r) s = true; else if (o && o.__owner === r) s = true } n = Object.getOwnPropertyDescriptor(t, i); a = n.get; o = n.set; if (s) { delete t[e]; if (a || o) { var u = a ? a.__orig : undefined; var h = o ? o.__orig : undefined; var _ = a ? a.__owner : o ? o.__owner : undefined; var c = makeGetterSetter(t, i, u, h, _); n = { enumerable: true, configurable: true }; if (a) n.get = c.getter || a; if (o) n.set = c.setter || o; Object.defineProperty(t, e, n) } else t[e] = t[i]; delete t[i] } e = i; i = "$" + e } } function unwrapFields(t, e) { for (var r in t) unwrapField(t, r, e) } o = { name: function (t) { this.__name = t; return this }, className: function () { return this.__name }, toString: function () { return "class " + (this.__name || "") }, __init: function (t) { if (this.__superclass !== Object) this.__superclass.__init(t); copyFields(this.__fields, t); copyActiveFields(this.__activeFields, t); wrapFields(this.__wrappedFields, t, this); for (var e = 0; e < this.__mixins.length; e++) { var r = this.__mixins[e]; copyFields(r.fields, t); wrapFields(r.fieldWrappers, t, r) } }, __alloc: function (t) { object.prototype = this.__methods; return new object(this, t) }, create: function (t) { var e = this.__alloc(t); for (var r = 0; r < this.__mixins.length; r++)this.__mixins[r].constructor.apply(e); return e }, field: function (t, e) { this.__fields[t] = e; return this }, fields: function (t) { for (var e in t) if (!copyActiveField(t, e, this.__activeFields)) this.field(e, t[e]); return this }, activeField: function (t, e, r) { var i = { enumerable: true, configurable: true }; if (e) i.get = e; if (r) i.set = r; Object.defineProperty(this.__activeFields, t, i); return this }, hasOwnField: function (t) { return this.__fields.hasOwnProperty(t) || this.__activeFields.hasOwnProperty(t) }, hasField: function (t) { var e = this; do { if (e.hasOwnField(t)) return true; e = e.__superclass } while (e != Object); return false }, listOwnFields: function () { var t = []; for (var e in this.__fields) t.push(e); for (e in this.__activeFields) t.push(e); return t }, listFields: function () { var t = this; var e = []; var r; do { for (r in t.__fields) if (e.indexOf(r) < 0) e.push(r); for (r in t.__activeFields) if (e.indexOf(r) < 0) e.push(r); t = t.__superclass } while (t != Object); return e }, constructor: function (t, e) { if (!e && typeof t == "function") { e = t; t = "create" } e = constructorWithSuper(this, t, e); this.__constructors[t] = e; this.__metaclass[t] = function () { var t = this.__alloc(); e.apply(t, arguments); return t }; return this }, constructors: function (t) { for (var e in t) this.constructor(e, t[e]); return this }, method: function (t, e) { if (!e) { delete this.__methods[t]; return this } var r = r = unwrapWrappers(this, t); e = methodWithSuper(e, t, this.__superclass); this.__methods[t] = e; wrapWrappers(this, t, r); return this }, methods: function (t) { for (var e in t) this.method(e, t[e]); return this }, hasOwnConstructor: function (t) { return t == "create" || this.__constructors.hasOwnProperty(t) }, hasOwnMethod: function (t) { return this.__methods.hasOwnProperty(t) }, getOwnConstructor: function (t) { return this.__constructors.hasOwnProperty(t || "create") }, getOwnMethod: function (t) { return this.__methods.hasOwnProperty(t) ? this.__methods[t] : undefined }, listOwnConstructors: function () { var t = ["create"]; for (var e in this.__constructors) if (e !== "create") t.push(e); return t }, listOwnMethods: function () { var t = []; for (var e in this.__methods) t.push(e); return t }, hasConstructor: function (t) { return t == "create" || this.__constructors[t] !== undefined }, hasMethod: function (t) { return this.__methods[t] !== undefined }, getConstructor: function (t) { if (!t) t = "create"; return this.__constructors[t] }, getMethod: function (t) { return this.__methods[t] }, listConstructors: function () { var t = this; var e = ["create"]; var r; do { for (r in t.__constructors) if (e.indexOf(r) < 0) e.push(r); t = t.__superclass } while (t != Object); return e }, listMethods: function () { var t = this; var e = []; var r; do { for (r in t.__methods) if (e.indexOf(r) < 0) e.push(r); t = t.__superclass } while (t != Object); return e }, wrap: function (t, e) { var r = this.getOwnMethod(t); var i = wrapMixinMethod(e, t, this.__superclass); if (i !== e) i.__inner = r || methodWithSuper(function () { this._super.apply(this, arguments) }, t, this.__superclass); if (!r) i.__wasempty = true; i.__wrapper = e; this.__methods[t] = i; return this }, wrappers: function (t) { for (var e in t) this.wrap(e, t[e]); return this }, wrapped: function (t, e) { var r = this.getOwnMethod(t); if (!e) return r && r.__inner; while (r && r.__inner) { if (r.__wrapper === e) return true; r = r.__inner } return false }, __popWrapper: function (t) { var e = this.getOwnMethod(t); if (e.__wasempty) delete this.__methods[t]; else this.__methods[t] = e.__inner; return e.__wrapper }, unwrap: function (t, e) { var r = this.getOwnMethod(t); if (!e && r) e = r.__wrapper; var i = unwrapWrappers(this, t, e); wrapWrappers(this, t, i); return this }, unwrapAll: function (t) { unwrapWrappers(this, t); return this }, mixin: function (t) { this.__mixins.push(t); defineMixinMethods(this, t); this.wrappers(t.wrappers); return this }, unmix: function (t) { var e = this.__mixins.indexOf(t); if (e < 0) return this; this.__mixins.splice(e, 1); for (var r in t.wrappers) this.unwrap(r, t.wrappers[r]); undefineMixinMethods(this, t); return this }, hasMixin: function (t) { return this.__mixins.indexOf(t) >= 0 }, wrapField: function (t, e, r) { var i = { enumerable: true, configurable: true }; if (e) i.get = e; if (r) i.set = r; if (e || r) Object.defineProperty(this.__wrappedFields, t, i); return this }, wrapFields: function (t) { for (var e in t) copyActiveField(t, e, this.__wrappedFields); return this }, wrappedField: function (t) { return this.__wrappedFields.hasOwnProperty(t) }, unwrapField: function (t) { delete this.__wrappedFields[t]; return this }, subclass: function () { return newClass(this) }, superclass: function () { return this.__superclass }, classMethod: function (t, e) { if (!e) { delete this.__metaclass[t]; return this } this.__metaclass[t] = e; return this }, classMethods: function (t) { for (var e in t) this.classMethod(e, t[e]); return this }, classField: function (t, e) { this.__metaclass[t] = e; return this }, classFields: function (t) { for (var e in t) if (!copyActiveField(t, e, this.__metaclass)) this.classField(e, t[e]); return this } }; t.newClass = newClass; t.metaclass = o; t.object = object })(typeof exports === "undefined" ? this["Classy"] = {} : exports);
/* Cache */
var Cache = Classy.newClass().name("Cache"); Cache.fields({ defaultDuration: 3600, values: {} }); Cache.constructor(function (a) { void 0 !== a && (this.defaultDuration = a) }); Cache.methods({ get: function (a) { if ("string" != typeof a) throw "Key must be a string"; this._expire(a); return this.values.hasOwnProperty(a) ? this.values[a].value : !1 }, set: function (a, c, b) { if ("string" != typeof a) throw "Key must be a string"; this.values[a] = { value: c, inserted: Math.floor(Date.now() / 1E3), duration: b ? b : this.defaultDuration } }, invalidate: function (a) { if ("string" != typeof a) throw console.log(typeof a), "Key must be a string"; this.values.hasOwnProperty(a) && delete this.values[a] }, invalidateAll: function () { delete this.values; this.values = {} }, _expire: function (a) { this.values.hasOwnProperty(a) && this.values[a].inserted + this.values[a].duration < Math.floor(Date.now() / 1E3) && delete this.values[a] }, has: function (a) { this._expire(a); return this.values.hasOwnProperty(a) } });
/* Caches */
var Caches = Classy.newClass(); Caches.classFields({ caches: {} }); Caches.classMethods({ _createCacheInstance: function (a) { void 0 === Caches.caches[a] && (Caches.caches[a] = Cache.create()); return Caches.caches[a] }, getPlayerDetailsCache: function () { return Caches._createCacheInstance("player details") } });
/* PlayerDetails */
var PlayerDetails = Classy.newClass().name("PlayerDetails"); PlayerDetails.fields({ data: { playerId: null, username: null, victories: 0, kills: 0, deaths: 0, suicides: 0, surrenders: 0, experience: 0, turretColour: null, treadColour: null, baseColour: null, turretAccessory: null, barrelAccessory: null, frontAccessory: null, backAccessory: null, treadAccessory: null, backgroundAccessory: null, badge: null, email: null, lastLogin: null, created: null, realName: null, birthYear: null, country: null, newsSubscriber: false, gmLevel: 0, beta: false, verified: false, banned: null, usernameApproved: null, premium: false, guest: false, rank: 0, xp: 0, lastForumPost: 0 } }); PlayerDetails.constructor(function () { }); PlayerDetails.constructor("withObject", function (obj) { this.data = obj }); PlayerDetails.methods({ getPlayerId: function () { return this.data.playerId }, getUsername: function () { return this.data.username }, getVictories: function () { return this.data.victories }, getKills: function () { return this.data.kills }, getDeaths: function () { return this.data.deaths }, getSuicides: function () { return this.data.suicides }, getSurrenders: function () { return this.data.surrenders }, getExperience: function () { return this.data.experience }, getTurretColour: function () { return this.data.turretColour }, getTreadColour: function () { return this.data.treadColour }, getBaseColour: function () { return this.data.baseColour }, getTurretAccessory: function () { return this.data.turretAccessory }, getBarrelAccessory: function () { return this.data.barrelAccessory }, getFrontAccessory: function () { return this.data.frontAccessory }, getBackAccessory: function () { return this.data.backAccessory }, getTreadAccessory: function () { return this.data.treadAccessory }, getBackgroundAccessory: function () { return this.data.backgroundAccessory }, getBadge: function () { return this.data.badge }, getEmail: function () { return this.data.email }, getLastLogin: function () { return this.data.lastLogin }, getCreated: function () { return this.data.created }, getRealName: function () { return this.data.realName }, getBirthYear: function () { return this.data.birthYear }, getCountry: function () { return this.data.country }, getNewsSubscriber: function () { return this.data.newsSubscriber }, getGmLevel: function () { return this.data.gmLevel }, getBeta: function () { return this.data.beta }, getVerified: function () { return this.data.verified }, getBanned: function () { return this.data.banned }, getUsernameApproved: function () { return this.data.usernameApproved }, getPremium: function () { return this.data.premium }, getGuest: function () { return this.data.guest }, getRank: function () { return this.data.rank }, getXP: function () { return this.data.xp }, getLastForumPost: function () { return this.data.lastForumPost }, toObj: function () { return this.data } });
/* UIConstants */
var UIConstants = Classy.newClass(); UIConstants.classFields({ TANK_ICON_SIZES: { SMALL: "small", MEDIUM: "medium", LARGE: "large" }, TANK_ICON_RESOLUTIONS: { small: 140, medium: 200, large: 320 }, TANK_ICON_TINT_PARTS: { TURRET: "turret", TREAD: "tread", BASE: "base" }, TANK_ICON_PARTS: { TURRET: "turret", BARREL: "barrel", LEFT_TREAD: "leftTread", RIGHT_TREAD: "rightTread", BASE: "base", TURRET_SHADE: "turretShade", BARREL_SHADE: "barrelShade", LEFT_TREAD_SHADE: "leftTreadShade", RIGHT_TREAD_SHADE: "rightTreadShade", BASE_SHADE: "baseShade" }, TANK_ICON_ACCESSORY_PARTS: { TURRET: "turret", BARREL: "barrel", FRONT: "front", BACK: "back", TREAD: "tread", BACKGROUND: "background", BADGE: "badge" }, TANK_UNAVAILABLE_COLOUR: { type: "numeric", rawValue: "0x888888", numericValue: "0x888888", imageValue: "" }, TANK_ICON_WIDTH_SMALL: 140, TANK_ICON_HEIGHT_SMALL: 84, TANK_ICON_WIDTH_MEDIUM: 200, TANK_ICON_HEIGHT_MEDIUM: 120, TANK_ICON_WIDTH_LARGE: 320, TANK_ICON_HEIGHT_LARGE: 192, TANK_ICON_PLACEMENTS: [{ x: -70, y: 35, flipped: false }, { x: 70, y: 35, flipped: true }, { x: -70, y: -60, flipped: false }, { x: 70, y: -60, flipped: true }], TANK_NAME_PLACEMENTS: [{ x: -70, y: 75 }, { x: 70, y: 75 }, { x: -70, y: -20 }, { x: 70, y: -20 }] });
/* UITankIcon */
var UITankIcon = Classy.newClass().name("UITankIcon"); UITankIcon.classFields({ compositedBuffer: $("<canvas></canvas>")[0], tintedBuffer: $("<canvas></canvas>")[0], outlineBuffer: $("<canvas></canvas>")[0] }); UITankIcon.classMethods({ loadPlayerTankIcon: function (canvas, size, playerId, onReady, context) { var result = Caches.getPlayerDetailsCache().get(playerId); if (typeof result == "object") { var turretColour = result.getTurretColour(); var treadColour = result.getTreadColour(); var baseColour = result.getBaseColour(); var turretAccessory = result.getTurretAccessory(); var barrelAccessory = result.getBarrelAccessory(); var frontAccessory = result.getFrontAccessory(); var backAccessory = result.getBackAccessory(); if (!turretColour || !treadColour || !baseColour || !turretAccessory || !barrelAccessory || !frontAccessory || !backAccessory) { return } if (onReady && context) { UITankIcon.loadTankIcon(canvas, size, turretColour, treadColour, baseColour, turretAccessory, barrelAccessory, frontAccessory, backAccessory, null, null, null, onReady, context) } else { UITankIcon.loadTankIcon(canvas, size, turretColour, treadColour, baseColour, turretAccessory, barrelAccessory, frontAccessory, backAccessory, null, null, null, function (self) { }, self) } } else { if (onReady && context) { UITankIcon.loadTankIcon(canvas, size, UIConstants.TANK_UNAVAILABLE_COLOUR, UIConstants.TANK_UNAVAILABLE_COLOUR, UIConstants.TANK_UNAVAILABLE_COLOUR, null, null, null, null, null, null, null, onReady, context) } else { UITankIcon.loadTankIcon(canvas, size, UIConstants.TANK_UNAVAILABLE_COLOUR, UIConstants.TANK_UNAVAILABLE_COLOUR, UIConstants.TANK_UNAVAILABLE_COLOUR, null, null, null, null, null, null, null, function (self) { }, self) } } }, loadTankIcon: function (canvas, size, turretColour, treadColour, baseColour, turretAccessory, barrelAccessory, frontAccessory, backAccessory, treadAccessory, backgroundAccessory, badge, onReady, context) { var loader = UITankIconLoader.create(canvas, size); loader.queueColour(UIConstants.TANK_ICON_TINT_PARTS.TURRET, turretColour); loader.queueColour(UIConstants.TANK_ICON_TINT_PARTS.TREAD, treadColour); loader.queueColour(UIConstants.TANK_ICON_TINT_PARTS.BASE, baseColour); loader.queueAccessory(UIConstants.TANK_ICON_ACCESSORY_PARTS.TURRET, turretAccessory); loader.queueAccessory(UIConstants.TANK_ICON_ACCESSORY_PARTS.BARREL, barrelAccessory); loader.queueAccessory(UIConstants.TANK_ICON_ACCESSORY_PARTS.FRONT, frontAccessory); loader.queueAccessory(UIConstants.TANK_ICON_ACCESSORY_PARTS.BACK, backAccessory); loader.queueAccessory(UIConstants.TANK_ICON_ACCESSORY_PARTS.TREAD, treadAccessory); loader.queueAccessory(UIConstants.TANK_ICON_ACCESSORY_PARTS.BACKGROUND, backgroundAccessory); loader.queueAccessory(UIConstants.TANK_ICON_ACCESSORY_PARTS.BADGE, badge); loader.onReady(onReady, context); loader.start() }, drawTankIcon: function (canvas, turretColour, treadColour, baseColour, turret, barrel, leftTread, rightTread, base, turretShade, barrelShade, leftTreadShade, rightTreadShade, baseShade, turretAccessory, barrelAccessory, frontAccessory, backAccessory, treadAccessory, backgroundAccessory, badge) { var context = canvas.getContext("2d"); if (canvas.width != this.compositedBuffer.width || canvas.height != this.compositedBuffer.height) { this.compositedBuffer.width = canvas.width; this.compositedBuffer.height = canvas.height } var compositedContext = this.compositedBuffer.getContext("2d"); compositedContext.clearRect(0, 0, canvas.width, canvas.height); if (canvas.width != this.tintedBuffer.width || canvas.height != this.tintedBuffer.height) { this.tintedBuffer.width = canvas.width; this.tintedBuffer.height = canvas.height } var tintedContext = this.tintedBuffer.getContext("2d"); tintedContext.clearRect(0, 0, canvas.width, canvas.height); if (backAccessory instanceof HTMLImageElement) { compositedContext.drawImage(backAccessory, 0, 0, canvas.width, canvas.height) } tintedContext.globalCompositeOperation = "copy"; if (treadColour instanceof HTMLImageElement) { tintedContext.drawImage(treadColour, 0, 0, canvas.width, canvas.height) } else { tintedContext.fillStyle = treadColour; tintedContext.fillRect(0, 0, canvas.width, canvas.height) } tintedContext.globalCompositeOperation = "destination-atop"; tintedContext.drawImage(leftTread, 0, 0, canvas.width, canvas.height); compositedContext.drawImage(this.tintedBuffer, 0, 0); compositedContext.drawImage(leftTreadShade, 0, 0, canvas.width, canvas.height); tintedContext.globalCompositeOperation = "copy"; if (turretColour instanceof HTMLImageElement) { tintedContext.drawImage(turretColour, 0, 0, canvas.width, canvas.height) } else { tintedContext.fillStyle = turretColour; tintedContext.fillRect(0, 0, canvas.width, canvas.height) } tintedContext.globalCompositeOperation = "destination-atop"; tintedContext.drawImage(turret, 0, 0, canvas.width, canvas.height); compositedContext.drawImage(this.tintedBuffer, 0, 0); compositedContext.drawImage(turretShade, 0, 0, canvas.width, canvas.height); tintedContext.globalCompositeOperation = "copy"; if (baseColour instanceof HTMLImageElement) { tintedContext.drawImage(baseColour, 0, 0, canvas.width, canvas.height) } else { tintedContext.fillStyle = baseColour; tintedContext.fillRect(0, 0, canvas.width, canvas.height) } tintedContext.globalCompositeOperation = "destination-atop"; tintedContext.drawImage(base, 0, 0, canvas.width, canvas.height); compositedContext.drawImage(this.tintedBuffer, 0, 0); compositedContext.drawImage(baseShade, 0, 0, canvas.width, canvas.height); tintedContext.globalCompositeOperation = "copy"; if (treadColour instanceof HTMLImageElement) { tintedContext.drawImage(treadColour, 0, 0, canvas.width, canvas.height) } else { tintedContext.fillStyle = treadColour; tintedContext.fillRect(0, 0, canvas.width, canvas.height) } tintedContext.globalCompositeOperation = "destination-atop"; tintedContext.drawImage(rightTread, 0, 0, canvas.width, canvas.height); compositedContext.drawImage(this.tintedBuffer, 0, 0); compositedContext.drawImage(rightTreadShade, 0, 0, canvas.width, canvas.height); tintedContext.globalCompositeOperation = "copy"; if (turretColour instanceof HTMLImageElement) { tintedContext.drawImage(turretColour, 0, 0, canvas.width, canvas.height) } else { tintedContext.fillStyle = turretColour; tintedContext.fillRect(0, 0, canvas.width, canvas.height) } tintedContext.globalCompositeOperation = "destination-atop"; tintedContext.drawImage(barrel, 0, 0, canvas.width, canvas.height); compositedContext.drawImage(this.tintedBuffer, 0, 0); compositedContext.drawImage(barrelShade, 0, 0, canvas.width, canvas.height); if (turretAccessory instanceof HTMLImageElement) { compositedContext.drawImage(turretAccessory, 0, 0, canvas.width, canvas.height) } if (frontAccessory instanceof HTMLImageElement) { compositedContext.drawImage(frontAccessory, 0, 0, canvas.width, canvas.height) } if (barrelAccessory instanceof HTMLImageElement) { compositedContext.drawImage(barrelAccessory, 0, 0, canvas.width, canvas.height) } if (canvas.width != this.outlineBuffer.width || canvas.height != this.outlineBuffer.height) { this.outlineBuffer.width = canvas.width; this.outlineBuffer.height = canvas.height } var outlineContext = this.outlineBuffer.getContext("2d"); outlineContext.globalCompositeOperation = "copy"; outlineContext.fillStyle = "rgba(0,0,0, 0.8)"; outlineContext.fillRect(0, 0, canvas.width, canvas.height); outlineContext.globalCompositeOperation = "destination-atop"; outlineContext.drawImage(this.compositedBuffer, 0, 0); var width = UIConstants.TANK_ICON_OUTLINE_WIDTH; var diagWidth = Math.sqrt(width * width / 2); context.drawImage(this.outlineBuffer, -width, 0); context.drawImage(this.outlineBuffer, -diagWidth, -diagWidth); context.drawImage(this.outlineBuffer, -diagWidth, diagWidth); context.drawImage(this.outlineBuffer, 0, width); context.drawImage(this.outlineBuffer, 0, -width); context.drawImage(this.outlineBuffer, diagWidth, -diagWidth); context.drawImage(this.outlineBuffer, diagWidth, diagWidth); context.drawImage(this.outlineBuffer, width, 0); context.drawImage(this.compositedBuffer, 0, 0) } });
/* UITankIconLoader */
var UITankIconLoader = Classy.newClass().name("UITankIconLoader"); UITankIconLoader.fields({ canvas: null, size: null, cb: null, context: null, numImages: 0, numImagesLoaded: 0, parts: {}, colours: {}, accessories: {}, started: false }); UITankIconLoader.classFields({ imageCache: {} }); UITankIconLoader.constructor(function (canvas, size) { this.canvas = canvas; this.size = size; this._queueImage("assets/images/tankIcon/", UIConstants.TANK_ICON_PARTS.TURRET, "", this.parts); this._queueImage("assets/images/tankIcon/", UIConstants.TANK_ICON_PARTS.BARREL, "", this.parts); this._queueImage("assets/images/tankIcon/", UIConstants.TANK_ICON_PARTS.LEFT_TREAD, "", this.parts); this._queueImage("assets/images/tankIcon/", UIConstants.TANK_ICON_PARTS.RIGHT_TREAD, "", this.parts); this._queueImage("assets/images/tankIcon/", UIConstants.TANK_ICON_PARTS.BASE, "", this.parts); this._queueImage("assets/images/tankIcon/", UIConstants.TANK_ICON_PARTS.TURRET_SHADE, "", this.parts); this._queueImage("assets/images/tankIcon/", UIConstants.TANK_ICON_PARTS.BARREL_SHADE, "", this.parts); this._queueImage("assets/images/tankIcon/", UIConstants.TANK_ICON_PARTS.LEFT_TREAD_SHADE, "", this.parts); this._queueImage("assets/images/tankIcon/", UIConstants.TANK_ICON_PARTS.RIGHT_TREAD_SHADE, "", this.parts); this._queueImage("assets/images/tankIcon/", UIConstants.TANK_ICON_PARTS.BASE_SHADE, "", this.parts) }); UITankIconLoader.methods({ queueColour: function (tintPart, colour) { if (colour.type === "numeric") { var hashColour = colour.numericValue.substr(2); hashColour = "#" + new Array(6 - hashColour.length + 1).join("0") + hashColour; this.colours[tintPart] = hashColour } else { this._queueImage("assets/images/colours/", "colour", colour.imageValue, this.colours, tintPart) } }, queueAccessory: function (part, accessory) { if (accessory !== null && accessory !== undefined && accessory !== "0") { this._queueImage("assets/images/accessories/", part, accessory, this.accessories) } }, onReady: function (cb, context) { this.cb = cb; this.context = context }, start: function () { this.started = true; this._checkIfDone() }, _queueImage: function (basePath, part, image, output, customKey) { var key = part; if (customKey !== undefined) { key = customKey } var cachedImage = UITankIconLoader.imageCache[part + image + "-" + this.size]; if (cachedImage === undefined) { var imageName = basePath + part + image + "-" + UIConstants.TANK_ICON_RESOLUTIONS[this.size]; var src = g_url(imageName + "@2x.png"); var imageElement = $("<img src='" + src + "' crossorigin='anonymous'/>"); var self = this; imageElement.load(function () { output[key] = imageElement[0]; UITankIconLoader.imageCache[part + image + "-" + self.size] = imageElement[0]; ++self.numImagesLoaded; self._checkIfDone() }); imageElement.error(function () { ++self.numImagesLoaded; self._checkIfDone() }) } else { output[key] = cachedImage; ++this.numImagesLoaded } ++this.numImages }, _checkIfDone: function () { if (this.numImagesLoaded == this.numImages) { this.cb(this.context); UITankIcon.drawTankIcon(this.canvas, this.colours[UIConstants.TANK_ICON_TINT_PARTS.TURRET], this.colours[UIConstants.TANK_ICON_TINT_PARTS.TREAD], this.colours[UIConstants.TANK_ICON_TINT_PARTS.BASE], this.parts[UIConstants.TANK_ICON_PARTS.TURRET], this.parts[UIConstants.TANK_ICON_PARTS.BARREL], this.parts[UIConstants.TANK_ICON_PARTS.LEFT_TREAD], this.parts[UIConstants.TANK_ICON_PARTS.RIGHT_TREAD], this.parts[UIConstants.TANK_ICON_PARTS.BASE], this.parts[UIConstants.TANK_ICON_PARTS.TURRET_SHADE], this.parts[UIConstants.TANK_ICON_PARTS.BARREL_SHADE], this.parts[UIConstants.TANK_ICON_PARTS.LEFT_TREAD_SHADE], this.parts[UIConstants.TANK_ICON_PARTS.RIGHT_TREAD_SHADE], this.parts[UIConstants.TANK_ICON_PARTS.BASE_SHADE], this.accessories[UIConstants.TANK_ICON_ACCESSORY_PARTS.TURRET], this.accessories[UIConstants.TANK_ICON_ACCESSORY_PARTS.BARREL], this.accessories[UIConstants.TANK_ICON_ACCESSORY_PARTS.FRONT], this.accessories[UIConstants.TANK_ICON_ACCESSORY_PARTS.BACK], this.accessories[UIConstants.TANK_ICON_ACCESSORY_PARTS.TREAD], this.accessories[UIConstants.TANK_ICON_ACCESSORY_PARTS.BACKGROUND], this.accessories[UIConstants.TANK_ICON_ACCESSORY_PARTS.BADGE]) } } });
/* AppendTanks */

/* Fetch TankTrouble version. Hacky!! */
var version = '';
$.ajax('https://cdn.tanktrouble.com/', 'GET').success(function (res) {
	res = $(res);
	res = res[res.length - 2].innerHTML;
	res = res.substring(res.indexOf('RELEASE'));
	version = res.substring(0, res.indexOf('/'));
}).error(function (res) { console.warn(res) });
var g_url = function (url) {
	return 'https://cdn.tanktrouble.com/' + version + '/' + url;
}
if (g_url('')) {
	$(window).load(function () {
		var playerDetails = { 29725: { playerId: "29725", username: "5am", turretColour: { type: "image", rawValue: "0x1579fb 60", numericValue: "0x1579fb", imageValue: "60" }, treadColour: { type: "image", rawValue: "0x2bde73 33", numericValue: "0x2bde73", imageValue: "33" }, baseColour: { type: "image", rawValue: "0x2bde73 33", numericValue: "0x2bde73", imageValue: "33" }, turretAccessory: "39", barrelAccessory: "8", frontAccessory: "21", backAccessory: "37", treadAccessory: "0", backgroundAccessory: "0", badge: "1" }, 33689: { playerId: "33689", username: "9thDr", turretColour: { type: "numeric", rawValue: "0x81fefd", numericValue: "0x81fefd", imageValue: "" }, treadColour: { type: "numeric", rawValue: "0xcccccc", numericValue: "0xcccccc", imageValue: "" }, baseColour: { type: "numeric", rawValue: "0xcccccc", numericValue: "0xcccccc", imageValue: "" }, turretAccessory: "75", barrelAccessory: "23", frontAccessory: "24", backAccessory: "399", treadAccessory: "0", backgroundAccessory: "0", badge: "0" }, 151476: { playerId: "151476", username: "bangbangshoota", turretColour: { type: "numeric", rawValue: "0xffff99", numericValue: "0xffff99", imageValue: "" }, treadColour: { type: "image", rawValue: "0x2bde73 33", numericValue: "0x2bde73", imageValue: "33" }, baseColour: { type: "numeric", rawValue: "0x2bde73", numericValue: "0x2bde73", imageValue: "" }, turretAccessory: "75", barrelAccessory: "102", frontAccessory: "0", backAccessory: "0", treadAccessory: "0", backgroundAccessory: "0", badge: "0" }, 160470: { playerId: "160470", username: "bbc", turretColour: { type: "image", rawValue: "0xffcf45 120", numericValue: "0xffcf45", imageValue: "120" }, treadColour: { type: "image", rawValue: "0xffcf45 120", numericValue: "0xffcf45", imageValue: "120" }, baseColour: { type: "numeric", rawValue: "0x64af3d", numericValue: "0x64af3d", imageValue: "" }, turretAccessory: "0", barrelAccessory: "120", frontAccessory: "0", backAccessory: "120", treadAccessory: "0", backgroundAccessory: "0", badge: "1" }, 255912: { playerId: "255912", username: "captainahvong", turretColour: { type: "numeric", rawValue: "0xfff100", numericValue: "0xfff100", imageValue: "" }, treadColour: { type: "numeric", rawValue: "0xcccccc", numericValue: "0xcccccc", imageValue: "" }, baseColour: { type: "numeric", rawValue: "0x333333", numericValue: "0x333333", imageValue: "" }, turretAccessory: "6", barrelAccessory: "14", frontAccessory: "6", backAccessory: "6", treadAccessory: "0", backgroundAccessory: "0", badge: "1" }, 332789: { playerId: "332789", username: "Dalek-Buster", turretColour: { type: "numeric", rawValue: "0xbb975a", numericValue: "0xbb975a", imageValue: "" }, treadColour: { type: "numeric", rawValue: "0x804000", numericValue: "0x804000", imageValue: "" }, baseColour: { type: "numeric", rawValue: "0x804000", numericValue: "0x804000", imageValue: "" }, turretAccessory: "22", barrelAccessory: "21", frontAccessory: "26", backAccessory: "107", treadAccessory: "0", backgroundAccessory: "0", badge: "1" }, 504460: { playerId: "504460", username: "FreeCandy-Tank", turretColour: { type: "numeric", rawValue: "0x0080ff", numericValue: "0x0080ff", imageValue: "" }, treadColour: { type: "image", rawValue: "0xddb135 43", numericValue: "0xddb135", imageValue: "43" }, baseColour: { type: "numeric", rawValue: "0xff1000", numericValue: "0xff1000", imageValue: "" }, turretAccessory: "44", barrelAccessory: "43", frontAccessory: "5", backAccessory: "42", treadAccessory: "0", backgroundAccessory: "0", badge: "0" }, 944643: { playerId: "944643", username: "meemee", turretColour: { type: "numeric", rawValue: "0xcccccc", numericValue: "0xcccccc", imageValue: "" }, treadColour: { type: "image", rawValue: "0x7f7f7f 14", numericValue: "0x7f7f7f", imageValue: "14" }, baseColour: { type: "image", rawValue: "0x333333 42", numericValue: "0x333333", imageValue: "42" }, turretAccessory: "43", barrelAccessory: "14", frontAccessory: "5", backAccessory: "45", treadAccessory: "0", backgroundAccessory: "0", badge: "0" }, 992262: { playerId: "992262", username: "moscles25", turretColour: { type: "numeric", rawValue: "0xe5e5e5", numericValue: "0xe5e5e5", imageValue: "" }, treadColour: { type: "image", rawValue: "0xfff5ee 108", numericValue: "0xfff5ee", imageValue: "108" }, baseColour: { type: "image", rawValue: "0x384b94 151", numericValue: "0x384b94", imageValue: "151" }, turretAccessory: "21", barrelAccessory: "23", frontAccessory: "5", backAccessory: "6", treadAccessory: "0", backgroundAccessory: "0", badge: "1" }, 1145079: { playerId: "1145079", username: "purup", turretColour: { type: "numeric", rawValue: "0x7f7f7f", numericValue: "0x7f7f7f", imageValue: "" }, treadColour: { type: "numeric", rawValue: "0x4c4c4c", numericValue: "0x4c4c4c", imageValue: "" }, baseColour: { type: "numeric", rawValue: "0xe5e5e5", numericValue: "0xe5e5e5", imageValue: "" }, turretAccessory: "120", barrelAccessory: "0", frontAccessory: "120", backAccessory: "120", treadAccessory: "0", backgroundAccessory: "0", badge: "1" }, 1341685: { playerId: "1341685", username: "supervolcano", turretColour: { type: "image", rawValue: "0xddb135 43", numericValue: "0xddb135", imageValue: "43" }, treadColour: { type: "image", rawValue: "0x333333 42", numericValue: "0x333333", imageValue: "42" }, baseColour: { type: "numeric", rawValue: "0xe40000", numericValue: "0xe40000", imageValue: "" }, turretAccessory: "38", barrelAccessory: "0", frontAccessory: "8", backAccessory: "42", treadAccessory: "0", backgroundAccessory: "0", badge: "1" }, 1450761: { playerId: "1450761", username: "Trabantt", turretColour: { type: "numeric", rawValue: "0xffff33", numericValue: "0xffff33", imageValue: "" }, treadColour: { type: "numeric", rawValue: "0xcccccc", numericValue: "0xcccccc", imageValue: "" }, baseColour: { type: "numeric", rawValue: "0xffff33", numericValue: "0xffff33", imageValue: "" }, turretAccessory: "40", barrelAccessory: "0", frontAccessory: "4", backAccessory: "0", treadAccessory: "0", backgroundAccessory: "0", badge: "0" }, 1619013: { playerId: "1619013", username: "george8888", turretColour: { type: "image", rawValue: "0x173677 153", numericValue: "0x173677", imageValue: "153" }, treadColour: { type: "image", rawValue: "0x173677 153", numericValue: "0x173677", imageValue: "153" }, baseColour: { type: "image", rawValue: "0x333333 42", numericValue: "0x333333", imageValue: "42" }, turretAccessory: "0", barrelAccessory: "44", frontAccessory: "5", backAccessory: "6", treadAccessory: "0", backgroundAccessory: "0", badge: "1" }, 1701735: { playerId: "1701735", username: "Zexel", turretColour: { type: "numeric", rawValue: "0x760000", numericValue: "0x760000", imageValue: "" }, treadColour: { type: "numeric", rawValue: "0xcccccc", numericValue: "0xcccccc", imageValue: "" }, baseColour: { type: "numeric", rawValue: "0x4c4c4c", numericValue: "0x4c4c4c", imageValue: "" }, turretAccessory: "39", barrelAccessory: "8", frontAccessory: "40", backAccessory: "37", treadAccessory: "0", backgroundAccessory: "0", badge: "0" }, 1899675: { playerId: "1899675", username: "TripleStryke", turretColour: { type: "numeric", rawValue: "0x333333", numericValue: "0x333333", imageValue: "" }, treadColour: { type: "image", rawValue: "0x333333 42", numericValue: "0x333333", imageValue: "42" }, baseColour: { type: "numeric", rawValue: "0xfff5ee", numericValue: "0xfff5ee", imageValue: "" }, turretAccessory: "76", barrelAccessory: "10", frontAccessory: "8", backAccessory: "73", treadAccessory: "0", backgroundAccessory: "0", badge: "0" }, 1916746: { playerId: "1916746", username: "Giraffe", turretColour: { type: "image", rawValue: "0x7f7f7f 14", numericValue: "0x7f7f7f", imageValue: "14" }, treadColour: { type: "image", rawValue: "0x7f7f7f 14", numericValue: "0x7f7f7f", imageValue: "14" }, baseColour: { type: "image", rawValue: "0x2bde73 33", numericValue: "0x2bde73", imageValue: "33" }, turretAccessory: "33", barrelAccessory: "33", frontAccessory: "7", backAccessory: "16", treadAccessory: "0", backgroundAccessory: "0", badge: "0" }, 1950197: { playerId: "1950197", username: "Spiros04", turretColour: { type: "numeric", rawValue: "0xffff99", numericValue: "0xffff99", imageValue: "" }, treadColour: { type: "image", rawValue: "0x7f7f7f 14", numericValue: "0x7f7f7f", imageValue: "14" }, baseColour: { type: "image", rawValue: "0x6743a2 152", numericValue: "0x6743a2", imageValue: "152" }, turretAccessory: "5", barrelAccessory: "14", frontAccessory: "7", backAccessory: "73", treadAccessory: "0", backgroundAccessory: "0", badge: "0" }, 2004238: { playerId: "2004238", username: "QuickNinja", turretColour: { type: "numeric", rawValue: "0x333333", numericValue: "0x333333", imageValue: "" }, treadColour: { type: "image", rawValue: "0xfff5ee 108", numericValue: "0xfff5ee", imageValue: "108" }, baseColour: { type: "image", rawValue: "0xfff5ee 108", numericValue: "0xfff5ee", imageValue: "108" }, turretAccessory: "74", barrelAccessory: "1", frontAccessory: "22", backAccessory: "5", treadAccessory: "0", backgroundAccessory: "0", badge: "1" }, 2028344: { playerId: "2028344", username: "Raika_TheDestroyer", turretColour: { type: "numeric", rawValue: "0xff6600", numericValue: "0xff6600", imageValue: "" }, treadColour: { type: "image", rawValue: "0x333333 42", numericValue: "0x333333", imageValue: "42" }, baseColour: { type: "image", rawValue: "0x333333 42", numericValue: "0x333333", imageValue: "42" }, turretAccessory: "11", barrelAccessory: "11", frontAccessory: "5", backAccessory: "42", treadAccessory: "0", backgroundAccessory: "0", badge: "0" }, 2113313: { playerId: "2113313", username: "HydroDonkey", turretColour: { type: "numeric", rawValue: "0xc5b47a", numericValue: "0xc5b47a", imageValue: "" }, treadColour: { type: "numeric", rawValue: "0xc5b47a", numericValue: "0xc5b47a", imageValue: "" }, baseColour: { type: "numeric", rawValue: "0x804000", numericValue: "0x804000", imageValue: "" }, turretAccessory: "21", barrelAccessory: "8", frontAccessory: "46", backAccessory: "150", treadAccessory: "0", backgroundAccessory: "0", badge: "0" }, 2364697: { playerId: "2364697", username: "Rediey", turretColour: { type: "numeric", rawValue: "0x990000", numericValue: "0x990000", imageValue: "" }, treadColour: { type: "image", rawValue: "0xd90a16 61", numericValue: "0xd90a16", imageValue: "61" }, baseColour: { type: "numeric", rawValue: "0xe73027", numericValue: "0xe73027", imageValue: "" }, turretAccessory: "45", barrelAccessory: "44", frontAccessory: "43", backAccessory: "4", treadAccessory: "0", backgroundAccessory: "0", badge: "0" }, 2589399: { playerId: "2589399", username: "Faint", turretColour: { type: "numeric", rawValue: "0xa5ff03", numericValue: "0xa5ff03", imageValue: "" }, treadColour: { type: "numeric", rawValue: "0xcccccc", numericValue: "0xcccccc", imageValue: "" }, baseColour: { type: "numeric", rawValue: "0xff8000", numericValue: "0xff8000", imageValue: "" }, turretAccessory: "0", barrelAccessory: "0", frontAccessory: "0", backAccessory: "4", treadAccessory: "0", backgroundAccessory: "0", badge: "0" }, 2788716: { playerId: "2788716", username: "YD109", turretColour: { type: "image", rawValue: "0x7f7f7f 14", numericValue: "0x7f7f7f", imageValue: "14" }, treadColour: { type: "image", rawValue: "0x173677 152", numericValue: "0x173677", imageValue: "152" }, baseColour: { type: "image", rawValue: "0x384b94 151", numericValue: "0x384b94", imageValue: "151" }, turretAccessory: "50", barrelAccessory: "43", frontAccessory: "10", backAccessory: "0", treadAccessory: "0", backgroundAccessory: "0", badge: "0" }, 2798909: { playerId: "2798909", username: "5aucy", turretColour: { type: "numeric", rawValue: "0xcccccc", numericValue: "0xcccccc", imageValue: "" }, treadColour: { type: "image", rawValue: "0x7f7f7f 14", numericValue: "0x7f7f7f", imageValue: "14" }, baseColour: { type: "numeric", rawValue: "0xcccccc", numericValue: "0xcccccc", imageValue: "" }, turretAccessory: "9", barrelAccessory: "8", frontAccessory: "9", backAccessory: "72", treadAccessory: "0", backgroundAccessory: "0", badge: "0" }, 2800426: { playerId: "2800426", username: "Rage", turretColour: { type: "numeric", rawValue: "0x333333", numericValue: "0x333333", imageValue: "" }, treadColour: { type: "image", rawValue: "0xddb135 43", numericValue: "0xddb135", imageValue: "43" }, baseColour: { type: "numeric", rawValue: "0xd0e2ee", numericValue: "0xd0e2ee", imageValue: "" }, turretAccessory: "40", barrelAccessory: "8", frontAccessory: "40", backAccessory: "42", treadAccessory: "0", backgroundAccessory: "0", badge: "0" }, 2810746: { playerId: "2810746", username: "CosmosAblaze", turretColour: { type: "image", rawValue: "0xd0e2ee 109", numericValue: "0xd0e2ee", imageValue: "109" }, treadColour: { type: "image", rawValue: "0xddb135 43", numericValue: "0xddb135", imageValue: "43" }, baseColour: { type: "numeric", rawValue: "0xff1000", numericValue: "0xff1000", imageValue: "" }, turretAccessory: "49", barrelAccessory: "8", frontAccessory: "5", backAccessory: "12", treadAccessory: "0", backgroundAccessory: "0", badge: "0" }, 3162693: { playerId: "3162693", username: "Commander", turretColour: { type: "numeric", rawValue: "0x333333", numericValue: "0x333333", imageValue: "" }, treadColour: { type: "numeric", rawValue: "0xcccccc", numericValue: "0xcccccc", imageValue: "" }, baseColour: { type: "numeric", rawValue: "0x333333", numericValue: "0x333333", imageValue: "" }, turretAccessory: "10", barrelAccessory: "32", frontAccessory: "8", backAccessory: "0", treadAccessory: "0", backgroundAccessory: "0", badge: "0" }, 3923647: { playerId: "3923647", username: "Renzore", turretColour: { type: "image", rawValue: "0x2bde73 33", numericValue: "0x2bde73", imageValue: "33" }, treadColour: { type: "numeric", rawValue: "0xcccccc", numericValue: "0xcccccc", imageValue: "" }, baseColour: { type: "image", rawValue: "0x2bde73 33", numericValue: "0x2bde73", imageValue: "33" }, turretAccessory: "0", barrelAccessory: "1", frontAccessory: "0", backAccessory: "0", treadAccessory: "0", backgroundAccessory: "0", badge: "0" }, 4067875: { playerId: "4067875", username: "NelFusion", turretColour: { type: "numeric", rawValue: "0xbe0000", numericValue: "0xbe0000", imageValue: "" }, treadColour: { type: "image", rawValue: "0xddb135 43", numericValue: "0xddb135", imageValue: "43" }, baseColour: { type: "numeric", rawValue: "0x5b0000", numericValue: "0x5b0000", imageValue: "" }, turretAccessory: "12", barrelAccessory: "9", frontAccessory: "6", backAccessory: "12", treadAccessory: "0", backgroundAccessory: "0", badge: "0" }, 6694888: { playerId: "6694888", username: "Jellican", turretColour: { type: "numeric", rawValue: "0xa00000", numericValue: "0xa00000", imageValue: "" }, treadColour: { type: "numeric", rawValue: "0x8000ff", numericValue: "0x8000ff", imageValue: "" }, baseColour: { type: "numeric", rawValue: "0xff55ee", numericValue: "0xff55ee", imageValue: "" }, turretAccessory: "18", barrelAccessory: "18", frontAccessory: "21", backAccessory: "13", treadAccessory: "0", backgroundAccessory: "0", badge: "0" } };

		$.each(playerDetails, function (playerId, playerDetail) {
			playerDetail = PlayerDetails.withObject(playerDetail);
			Caches.getPlayerDetailsCache().set(playerId, playerDetail);

			$("img[src$='" + playerDetail.getUsername() + ".png']").each(function (i, image) {
				image = $(image);
				var h = image.height(),
					w = image.width(),
					canvas = $("<canvas>");

				image.replaceWith(canvas);

				canvas = canvas[0] || canvas;

				/* We can't lazy load tanks or width and height might be zero, and then the tank won't draw! */
				canvas.width = w;
				canvas.height = h;
				canvas.style.width = w;
				canvas.style.height = h;
				UITankIcon.loadPlayerTankIcon(
					canvas,
					UIConstants.TANK_ICON_SIZES.LARGE,
					playerId
				);
			});
		});
	});
}
/*
//How to use:
//Add playerIds of all relevant tanks to the `playerIds` array.
//Run the code. After a few seconds, it will be done and the data needed to render the tank canvases will be in the `res` object.
//Be focus on the console and enter `copy(res)` this will copy the object to your clipboard.
//Go to https://www.uglifyjs.net/, enter var `playerDetails=`, followed by what is now in your clipboard.
//Copy the result after you have pressed minify and replace the `playerDetails` variable in the above code. That should be it.

//How it works:
//Adds neccessary functions to the webpage. Upon window load, it will loop through all player details and add them to a cache.
//Then, it will look for img elements in the DOM having the source name of the player's username (eg it will find all instances of src="..../Commander.png" when looking for Commander)
//It will cycle through all the images found and will then generate a canvas with the player details.
//g_url is generated in a hacky way. It fetches the TankTrouble site and finds the script tag mentioning the release version. It seperates the version and stores it in the version variable which is used in the function.

var playerIds = ["29725", "1145079", "160470", "1899675", "4067875", "3162693", "1950197", "2004238", "1619013", "255912", "2788716", "992262", "332789", "33689", "2810746", "1701735", "1450761", "944643", "1916746", "3923647", "2800426", "504460", "2798909", "6694888", "2028344", "2589399", "1341685", "2364697", "151476", "2113313"];
^ PlayerIds of current players featured on the site.
var res = {};
playerIds.forEach(function(playerId){
	Backend.getInstance().getPlayerDetails(function(r){
		if (typeof r === "object") {
			var formatted = {}
			formatted.playerId = r.data.playerId;
			formatted.username = r.data.username;
			formatted.turretColour = r.data.turretColour;
			formatted.treadColour = r.data.treadColour;
			formatted.baseColour = r.data.baseColour;
			formatted.turretAccessory = r.data.turretAccessory;
			formatted.barrelAccessory = r.data.barrelAccessory;
			formatted.frontAccessory = r.data.frontAccessory;
			formatted.backAccessory = r.data.backAccessory;
			formatted.treadAccessory = r.data.treadAccessory;
			formatted.backgroundAccessory = r.data.backgroundAccessory;
			formatted.badge = r.data.badge;
			res[playerId] = formatted;
		}
	},null,null,playerId,Caches.getPlayerDetailsCache());
});

*/